defmodule EulerTwelve do
  @moduledoc """
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
  ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
  """
  def solve(limit // 500) do
    triangle(tri_index(limit))
  end

  def num_divisors(n) do
    Enum.reduce(1..(round(n / 2)), 0, fn(x, acc) ->
      if rem(n, x) == 0 do
        acc + 1
      else
        acc
      end
    end) + 1
  end

  def tri_index(limit) do
    _tri_index(1, num_divisors(1), num_divisors(2), limit)
  end

  defp _tri_index(n, lnum, rnum, limit) do
    if lnum * rnum < limit do
      _tri_index(n + 1, rnum, num_divisors(n + 1), limit)
    else
      n
    end
  end

  def triangle(n), do: round((n * (n + 1)) / 2)
end

IO.puts inspect(EulerTwelve.solve(2))
